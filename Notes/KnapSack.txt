https://www.geeksforgeeks.org/0-1-knapsack-problem-dp-10/


1) Optimal Substructure:
To consider all subsets of items, there can be two cases for every item: (1) the item is included in the optimal subset, (2) not included in the optimal set.
Therefore, the maximum value that can be obtained from n items is max of following two values.
1) Maximum value obtained by n-1 items and W weight (excluding nth item).
2) Value of nth item plus maximum value obtained by n-1 items and W minus weight of the nth item (including nth item).

If weight of nth item is greater than W, then the nth item cannot be included and case 1 is the only possibility.



  int val[] = new int[]{60, 100, 120}; 
  int wt[] = new int[]{10, 20, 30}; 
  int  W = 50; 

for(i = 0 ;i <= n ;i++)  {   // No of weights

	for(j = 0 ;j <= W;i ++){
		if(j == 0 || i ==0){
			T[i][j] = 0;
		}else if(wt[i] <= j){
			T[i][j] = max( (val[i] + T[i-1][j-wt[i-1]]), T[i-1][j])
		} else {
			T[i][j] = T[i-1][j];
		}
	}

}